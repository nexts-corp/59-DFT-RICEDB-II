"use strict";function _classCallCheck(e,a){if(!(e instanceof a))throw new TypeError("Cannot call a class as a function")}var _createClass=function(){function e(e,a){for(var o=0;o<a.length;o++){var t=a[o];t.enumerable=t.enumerable||!1,t.configurable=!0,"value"in t&&(t.writable=!0),Object.defineProperty(e,t.key,t)}}return function(a,o,t){return o&&e(a.prototype,o),t&&e(a,t),a}}();!function(){var e=function(){function e(){_classCallCheck(this,e)}return _createClass(e,[{key:"beforeRegister",value:function(){this.is="glon-system",this.properties={role:{type:Object,value:[{path:"app1/page1",role:["admin","manager","user1"]}]}}}},{key:"created",value:function(){window.gl.glonSystem=document.querySelector("glon-system"),"undefined"==typeof localStorage.glLanguage&&localStorage.setItem("glLanguage",glonInit.language);var e=jwt_decode("eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjoiVXNlcjEiLCJyb2xlIjoiYWRtaW4ifQ.oRx_ieJoxSZPv7Y8lM03Qv8Qb24PVmuFpWBUxWEkBcg");this.auth=e}},{key:"_routePageChanged",value:function(e){var a=this,o={};if("/"==e.path){var t=glonInit.indexPath.split("/");o={app:t[1],page:t[2]}}else o="undefined"==typeof e.path.split("/")[2]?{app:"error",page:"404"}:this.routeData;var l=function(){var e=document.createElement(o.app+"-"+o.page);e.route=o,a.getLocales(a.layout,o.app,function(t){if(window.mergeLocales=t,a.layout!=a.oldLayout){var l=function(){var t=a.$$("tag-app-load");t.innerHTML="";var l=document.createElement(a.layout);l.route=o,l.page=e,t.appendChild(l)};glonInit.layout!=a.layout?a.importHref(a.resolveUrl("/src/template/"+a.layout+"/"+a.layout+".html"),function(e){l()},function(e){a.changePath("/error/404")},!0):l()}else if("undefined"==typeof a.layout){var n=a.$$("tag-app-load");n.innerHTML="",n.appendChild(e)}else{var n=a.$$("tag-app-load>"+a.layout);n.route=o,n.page=e}a.oldLayout=a.layout})};this.checkRole(o)&&(o={app:"error",page:"403"}),this.importHref(this.resolveUrl("/src/apps/"+o.app+"/"+o.page+".html"),function(e){l()},function(e){o={app:"error",page:"404"},a.importHref(a.resolveUrl("/src/apps/"+o.app+"/"+o.page+".html"),function(e){l()},null,!0)},!0)}},{key:"changePath",value:function(e){this.$.changePath.setAttribute("href",e),this.$.changePath.click()}},{key:"getLocales",value:function(e,a,o){var t=function(){var t=JSON.parse(JSON.stringify(locales.global));if("undefined"!=typeof locales.layouts[e])for(var l in locales.layouts[e])for(var n in locales.layouts[e][l])t[l][n]=locales.layouts[e][l][n];for(var l in locales.apps[a])for(var n in locales.apps[a][l])t[l][n]=locales.apps[a][l][n];o(t)},l={global:!1,layout:!1,app:!1,loaded:function(e){this[e]=!0,this.global&&this.layout&&this.app&&t()}};"undefined"==typeof locales&&(window.locales={global:null,apps:{},layouts:{}}),null==locales.global?axios.get("/src/apps/localize.json").then(function(e){locales.global=e.data,l.loaded("global")}):l.loaded("global"),"undefined"==typeof locales.layouts[e]?axios.get("/src/template/"+e+"/localize.json").then(function(a){locales.layouts[e]=a.data,l.loaded("layout")}):l.loaded("layout"),"undefined"==typeof locales.apps[a]?axios.get("/src/apps/"+a+"/localize.json").then(function(e){locales.apps[a]=e.data,l.loaded("app")}):l.loaded("app")}},{key:"checkRole",value:function(e){var a=this,o=!0;return this.role.map(function(t,l){t.path==e.app+"/"+e.page?t.role.map(function(e){a.auth.role==e&&(o=!1)}):o=!1}),o}},{key:"observers",get:function(){return["_routePageChanged(route)"]}}]),e}();Polymer(e)}();
//# sourceMappingURL=data:application/json;base64,
